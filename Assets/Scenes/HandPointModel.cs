using UnityEngine;
using Normal.Realtime.Serialization;
using Normal.Realtime;

[RealtimeModel]
public partial class HandPointModel
{
    [RealtimeProperty(1, true)]
    private RealtimeArray<FingerPointModel> _fingerRots;

    [RealtimeProperty(2, true)]
    private Quaternion _lHandRot = Quaternion.identity;

    [RealtimeProperty(3, true)]
    private Vector3 _lHandPos;

    [RealtimeProperty(4, true)]
    private Quaternion _rHandRot = Quaternion.identity;

    [RealtimeProperty(5, true)]
    private Vector3 _rHandPos;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandPointModel : RealtimeModel {
    public UnityEngine.Quaternion lHandRot {
        get {
            return _lHandRotProperty.value;
        }
        set {
            if (_lHandRotProperty.value == value) return;
            _lHandRotProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public UnityEngine.Vector3 lHandPos {
        get {
            return _lHandPosProperty.value;
        }
        set {
            if (_lHandPosProperty.value == value) return;
            _lHandPosProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public UnityEngine.Quaternion rHandRot {
        get {
            return _rHandRotProperty.value;
        }
        set {
            if (_rHandRotProperty.value == value) return;
            _rHandRotProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public UnityEngine.Vector3 rHandPos {
        get {
            return _rHandPosProperty.value;
        }
        set {
            if (_rHandPosProperty.value == value) return;
            _rHandPosProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public Normal.Realtime.Serialization.RealtimeArray<FingerPointModel> fingerRots {
        get => _fingerRots;
    }
    
    public enum PropertyID : uint {
        FingerRots = 1,
        LHandRot = 2,
        LHandPos = 3,
        RHandRot = 4,
        RHandPos = 5,
    }
    
    #region Properties
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeArray<FingerPointModel>> _fingerRotsProperty;
    
    private ReliableProperty<UnityEngine.Quaternion> _lHandRotProperty;
    
    private ReliableProperty<UnityEngine.Vector3> _lHandPosProperty;
    
    private ReliableProperty<UnityEngine.Quaternion> _rHandRotProperty;
    
    private ReliableProperty<UnityEngine.Vector3> _rHandPosProperty;
    
    #endregion
    
    public HandPointModel() : base(null) {
        RealtimeModel[] childModels = new RealtimeModel[1];
        
        _fingerRots = new Normal.Realtime.Serialization.RealtimeArray<FingerPointModel>();
        childModels[0] = _fingerRots;
        
        SetChildren(childModels);
        
        _fingerRotsProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeArray<FingerPointModel>>(1, _fingerRots);
        _lHandRotProperty = new ReliableProperty<UnityEngine.Quaternion>(2, _lHandRot);
        _lHandPosProperty = new ReliableProperty<UnityEngine.Vector3>(3, _lHandPos);
        _rHandRotProperty = new ReliableProperty<UnityEngine.Quaternion>(4, _rHandRot);
        _rHandPosProperty = new ReliableProperty<UnityEngine.Vector3>(5, _rHandPos);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _lHandRotProperty.UnsubscribeCallback();
        _lHandPosProperty.UnsubscribeCallback();
        _rHandRotProperty.UnsubscribeCallback();
        _rHandPosProperty.UnsubscribeCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _fingerRotsProperty.WriteLength(context);
        length += _lHandRotProperty.WriteLength(context);
        length += _lHandPosProperty.WriteLength(context);
        length += _rHandRotProperty.WriteLength(context);
        length += _rHandPosProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _fingerRotsProperty.Write(stream, context);
        writes |= _lHandRotProperty.Write(stream, context);
        writes |= _lHandPosProperty.Write(stream, context);
        writes |= _rHandRotProperty.Write(stream, context);
        writes |= _rHandPosProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.FingerRots: {
                    changed = _fingerRotsProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.LHandRot: {
                    changed = _lHandRotProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.LHandPos: {
                    changed = _lHandPosProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.RHandRot: {
                    changed = _rHandRotProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.RHandPos: {
                    changed = _rHandPosProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _fingerRots = fingerRots;
        _lHandRot = lHandRot;
        _lHandPos = lHandPos;
        _rHandRot = rHandRot;
        _rHandPos = rHandPos;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
