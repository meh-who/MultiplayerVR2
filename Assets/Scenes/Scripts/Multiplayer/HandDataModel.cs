using UnityEngine;
using Normal.Realtime.Serialization;
using Normal.Realtime;

[RealtimeModel]
public partial class HandDataModel
{
    [RealtimeProperty(1, true)]
    private RealtimeArray<FingerRotModel> _fingerRotations;

    [RealtimeProperty(2, false)]
    private Vector3 _handPosition;

    [RealtimeProperty(3, false)]
    private Quaternion _handRotation;

    [RealtimeProperty(4, true)]
    private bool _leftOrRight;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandDataModel : RealtimeModel {
    public UnityEngine.Vector3 handPosition {
        get {
            return _handPositionProperty.value;
        }
        set {
            if (_handPositionProperty.value == value) return;
            _handPositionProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion handRotation {
        get {
            return _handRotationProperty.value;
        }
        set {
            if (_handRotationProperty.value == value) return;
            _handRotationProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public bool leftOrRight {
        get {
            return _leftOrRightProperty.value;
        }
        set {
            if (_leftOrRightProperty.value == value) return;
            _leftOrRightProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public Normal.Realtime.Serialization.RealtimeArray<FingerRotModel> fingerRotations {
        get => _fingerRotations;
    }
    
    public enum PropertyID : uint {
        FingerRotations = 1,
        HandPosition = 2,
        HandRotation = 3,
        LeftOrRight = 4,
    }
    
    #region Properties
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeArray<FingerRotModel>> _fingerRotationsProperty;
    
    private UnreliableProperty<UnityEngine.Vector3> _handPositionProperty;
    
    private UnreliableProperty<UnityEngine.Quaternion> _handRotationProperty;
    
    private ReliableProperty<bool> _leftOrRightProperty;
    
    #endregion
    
    public HandDataModel() : base(null) {
        RealtimeModel[] childModels = new RealtimeModel[1];
        
        _fingerRotations = new Normal.Realtime.Serialization.RealtimeArray<FingerRotModel>();
        childModels[0] = _fingerRotations;
        
        SetChildren(childModels);
        
        _fingerRotationsProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeArray<FingerRotModel>>(1, _fingerRotations);
        _handPositionProperty = new UnreliableProperty<UnityEngine.Vector3>(2, _handPosition);
        _handRotationProperty = new UnreliableProperty<UnityEngine.Quaternion>(3, _handRotation);
        _leftOrRightProperty = new ReliableProperty<bool>(4, _leftOrRight);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _leftOrRightProperty.UnsubscribeCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _fingerRotationsProperty.WriteLength(context);
        length += _handPositionProperty.WriteLength(context);
        length += _handRotationProperty.WriteLength(context);
        length += _leftOrRightProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _fingerRotationsProperty.Write(stream, context);
        writes |= _handPositionProperty.Write(stream, context);
        writes |= _handRotationProperty.Write(stream, context);
        writes |= _leftOrRightProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.FingerRotations: {
                    changed = _fingerRotationsProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.HandPosition: {
                    changed = _handPositionProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.HandRotation: {
                    changed = _handRotationProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.LeftOrRight: {
                    changed = _leftOrRightProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _fingerRotations = fingerRotations;
        _handPosition = handPosition;
        _handRotation = handRotation;
        _leftOrRight = leftOrRight;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
